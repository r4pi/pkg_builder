#!/usr/bin/env python3
"""
Script to help manage package lists across multiple architectures and OSes
"""

import argparse
import configparser
import platform
import sys

parser = argparse.ArgumentParser(description="Output the package list.")
parser.add_argument(
    "-a",
    "--arch",
    default=None,
    help="force a specific architecture or OS. Default uses host arch.",
)
parser.add_argument(
    "-c",
    "--config",
    action="store_true",
    help="Display the current system configuration. (arch and version codename)",
)
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help="Display verbose output suitable for debugging.",
)

args = parser.parse_args()

if args.config:
    print("Arch:      {}".format(platform.machine()))
    print("Codename:  {}".format(platform.freedesktop_os_release()["VERSION_CODENAME"]))
    sys.exit(0)



config = configparser.RawConfigParser(allow_no_value=True)
config.optionxform = str

config.read("packages.cfg")

# Calculate the additional package set to use.
# This is either "armv7l" or, for 64 bit archtectures, the OS codename
# eg. bookworm or noble
if args.arch is None:
    pkg_arch = platform.machine()
else:
    pkg_arch = args.arch

if pkg_arch == "aarch64":
    # Default python 3 for Raspberry Pi OS < bookworm did not include freedesktop_os_release
    try:
        additional_packages = platform.freedesktop_os_release()["VERSION_CODENAME"]
    except AttributeError:
        additional_packages = "aarch64"
else:
    additional_packages = pkg_arch

if args.verbose is True:
    print("# Printing packages for all architectures")
for package in config["all"]:
    print(package)

if args.verbose is True:
    print(f"# Printing additional packages for: {additional_packages}")
try:
    for arch_package in config[additional_packages]:
        print(arch_package)
except KeyError:
    if args.verbose is True:
        print("# no packages found for supplied architecture")
